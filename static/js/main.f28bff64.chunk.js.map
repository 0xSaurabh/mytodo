{"version":3,"sources":["Nav.js","Items.js","CheckedItems.js","EnterItems.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","Items","props","todoList","unchecked","map","i","key","onClick","checkItem","xmlns","width","height","viewBox","id","data-name","transform","fill","stroke","strokeWidth","cx","cy","r","d","strokeLinecap","type","value","item","onChange","e","updateText","CheckedItems","checked","uncheckItem","EnterItems","saved","todo","state","current","hideOn1","hideOn2","handleClick","bind","addItem","save","this","localStorage","setItem","JSON","stringify","array","length","j","temp","setState","Date","now","target","push","sort","splice","preventDefault","onSubmit","placeholder","React","Component","App","Boolean","window","location","hostname","match","myTodo","getItem","parse","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f28bff64.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Nav.css';\r\n\r\nfunction Nav(){\r\n    return(\r\n        <div className=\"Nav-Bar\">\r\n            <div className=\"logo\">\r\n                <h1>Messy</h1>\r\n                <h1>Parameters</h1>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\nimport './Items.css'\r\n\r\nfunction Items(props){\r\n    const todo = props.unchecked;\r\n    const todoList = todo.map(i => {\r\n        return(\r\n            <div className=\"itemContainer animate\" key={i.key}>  \r\n                <button onClick={() => props.checkItem(i)}>\r\n                    <svg className=\"checkbox\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                        <g id=\"Group_10\" data-name=\"Group 10\" transform=\"translate(-106 -964)\">\r\n                            <g id=\"ellipse\" data-name=\"Ellipse 5\" transform=\"translate(106 964)\" fill=\"#fff\" stroke=\"#3f3f3f\" strokeWidth=\"1\">\r\n                                <circle cx=\"12\" cy=\"12\" r=\"12\" stroke=\"none\"/>\r\n                                <circle cx=\"12\" cy=\"12\" r=\"11.5\" fill=\"none\"/>\r\n                            </g>\r\n                            <path id=\"Path_13\" data-name=\"Path 13\" d=\"M109.7,978.959s1.774,3.6,3.449,3.6,10.87-6.5,10.87-6.5\" transform=\"translate(1 -3)\" fill=\"none\" stroke=\"#3f3f3f\" strokeLinecap=\"round\" strokeWidth=\"1\"/>\r\n                        </g>\r\n                    </svg>\r\n                </button>\r\n                <div className=\"Items\"><input type=\"text\" value={i.item} onChange={(e) => props.updateText(e,i)}></input></div>\r\n            </div>\r\n        );\r\n    });\r\n    return(\r\n        <>{todoList}</>\r\n    );\r\n}\r\n\r\nexport default Items;","import React from 'react';\r\nimport './CheckedItems.css';\r\n\r\nfunction CheckedItems(props){\r\n    const todo = props.checked;\r\n    const todoList = todo.map(i => {\r\n        return(\r\n            <div className=\"itemContainer-checked animate\" key={i.key}>\r\n                <button onClick={() => props.uncheckItem(i)}>\r\n                    <svg className=\"checkbox\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                        <g id=\"Group_10\" data-name=\"Group 10\" transform=\"translate(-106 -964)\">\r\n                            <g id=\"ellipse\" data-name=\"Ellipse 5\" transform=\"translate(106 964)\" fill=\"#fff\" stroke=\"#3f3f3f\" strokeWidth=\"1\">\r\n                                <circle cx=\"12\" cy=\"12\" r=\"12\" stroke=\"none\"/>\r\n                                <circle cx=\"12\" cy=\"12\" r=\"11.5\" fill=\"none\"/>\r\n                            </g>\r\n                            <path id=\"Path_13\" data-name=\"Path 13\" d=\"M109.7,978.959s1.774,3.6,3.449,3.6,10.87-6.5,10.87-6.5\" transform=\"translate(1 -3)\" fill=\"none\" stroke=\"#3f3f3f\" strokeLinecap=\"round\" strokeWidth=\"1\"/>\r\n                        </g>\r\n                    </svg>\r\n                </button>\r\n                <div className=\"Items\">{i.item}</div>\r\n            </div>\r\n        );\r\n    });\r\n    return(\r\n        <>{todoList}</>\r\n    );\r\n}\r\n\r\nexport default CheckedItems;","import React from 'react';\r\nimport Items from './Items';\r\nimport './EnterItems.css';\r\nimport CheckedItems from './CheckedItems';\r\n\r\nclass EnterItems extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let saved = this.props.todo;\r\n\r\n        if(!(saved === null)){\r\n            this.state = {\r\n                unchecked: saved.unchecked,\r\n                checked: saved.checked,\r\n                current: {\r\n                    key: \"\",\r\n                    item: \"\"\r\n                },\r\n                hideOn1: saved.hideOn1,\r\n                hideOn2: saved.hideOn2\r\n            }\r\n        } else {\r\n            this.state = {\r\n                unchecked: [],\r\n                checked: [],\r\n                current: {\r\n                    key: \"\",\r\n                    item: \"\"\r\n                },\r\n                hideOn1: true,\r\n                hideOn2: true\r\n            }\r\n        }\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.checkItem = this.checkItem.bind(this);\r\n        this.uncheckItem = this.uncheckItem.bind(this);\r\n        this.updateText = this.updateText.bind(this);\r\n        this.save = this.save.bind(this);\r\n    }\r\n\r\n    save(){\r\n        let state = this.state;\r\n        localStorage.setItem('myTodo',JSON.stringify(state));\r\n    }\r\n\r\n    sort(array){\r\n        for(let i = 0; i < array.length; i++){\r\n            for (let j = 0; j < array.length-i-1; j++) {\r\n                if(array[j].key > array[j+1].key){\r\n                    let temp = array[j+1];\r\n                    array[j+1] = array[j];\r\n                    array[j] = temp;\r\n                }\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    handleClick(e){\r\n        this.setState({\r\n            current: {\r\n                key: Date.now(),\r\n                item: e.target.value\r\n            }\r\n        });\r\n    }\r\n\r\n    checkItem(item){\r\n        const unchecked = this.state.unchecked;\r\n        let checked = this.state.checked;\r\n\r\n        if(checked.length === 0)\r\n            this.setState({\r\n                hideOn2: !this.state.hideOn2\r\n            });\r\n\r\n        checked.push(item);\r\n        checked = this.sort(checked);\r\n\r\n        for(let i = 0; i < unchecked.length; i++){\r\n            if(item.key === unchecked[i].key)\r\n                unchecked.splice(i,1);\r\n        }\r\n\r\n        if(unchecked.length === 0) {\r\n            this.setState({\r\n                hideOn1: !this.state.hideOn1\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            unchecked: unchecked,\r\n            checked: checked\r\n        },this.save);\r\n    }\r\n\r\n    uncheckItem(item){\r\n        let unchecked = this.state.unchecked;\r\n        const checked = this.state.checked;\r\n\r\n        if(unchecked.length === 0) {\r\n            this.setState({\r\n                hideOn1: !this.state.hideOn1\r\n            });\r\n        }\r\n\r\n        unchecked.push(item);\r\n        unchecked = this.sort(unchecked);\r\n\r\n        for(let i = 0; i < checked.length; i++){\r\n            if(item.key === checked[i].key)\r\n                checked.splice(i,1);\r\n        }\r\n\r\n        if(checked.length === 0) {\r\n            this.setState({\r\n                hideOn2: !this.state.hideOn2\r\n            });\r\n        }\r\n        \r\n        this.setState({\r\n            unchecked: unchecked,\r\n            checked: checked\r\n        },this.save);\r\n    }\r\n\r\n    updateText(e,item){\r\n        const unchecked = this.state.unchecked;\r\n\r\n        for(let i=0;i<unchecked.length;i++){\r\n            if(unchecked[i].key === item.key){\r\n                unchecked[i].item = e.target.value;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            unchecked: unchecked\r\n        },this.save);\r\n    }\r\n\r\n    addItem(e){\r\n        e.preventDefault();\r\n        const current = this.state.current;\r\n        const todo = this.state.unchecked;\r\n\r\n        if(current.item !== \"\"){\r\n            if(todo.length === 0)\r\n                this.setState({\r\n                    hideOn1: !this.state.hideOn1\r\n                });\r\n            todo.push(current);\r\n            this.setState(\r\n                {\r\n                    unchecked: todo,\r\n                    current: {\r\n                        key: \"\",\r\n                        item: \"\"\r\n                    }\r\n                },\r\n                this.save\r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <form className=\"enter-todo\" onSubmit={this.addItem}>\r\n                    <input type=\"text\" placeholder=\"Add a To-Do\" value= {this.state.current.item} onChange={(e) => this.handleClick(e)}></input>\r\n                    <button type=\"submit\"></button>\r\n                </form>\r\n                {!this.state.hideOn1 && <div className=\"section-div\" id=\"incomplete\">\r\n                    <h1 className=\"section\">To-Dos:</h1>\r\n                </div>}\r\n                <Items unchecked={this.state.unchecked} checkItem={this.checkItem} updateText={this.updateText}/>\r\n                {!this.state.hideOn2 && <div className=\"section-div complete\">\r\n                    <h1 className=\"section\">Completed:</h1>\r\n                </div>}\r\n                <CheckedItems checked={this.state.checked} uncheckItem={this.uncheckItem}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnterItems;","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport EnterItems from './EnterItems'\n\nfunction App(props) {\n  return (\n    <>  \n      <Nav />\n      <EnterItems todo={props.todo}/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet myTodo = localStorage.getItem('myTodo');\n\nmyTodo = JSON.parse(myTodo);\n\nReactDOM.render(<App todo={myTodo}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}